apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  notification.yaml: |
    kafka:
        url: {{ .Values.kafka.uri | quote }}
        group: "monasca-notification"
        alarm_topic: "alarm-state-transitions"
        notification_topic: "alarm-notifications"
        notification_retry_topic: "retry-notifications"
        periodic:
            60: 60-seconds-notifications
        max_offset_lag: 600  # In seconds, undefined for none

    mysql:
        host: {{ .Values.mysql.host | quote }}
        user: {{ .Values.mysql.user | quote }}
        passwd: {{ .Values.mysql.password | quote }}
        db: {{ .Values.mysql.database | quote }}

    notification_types:
    #    email:
    #        server: "localhost"
    #        port: 25
    #        user: ""
    #        password: ""
    #        timeout: 15
    #        from_addr: "hpcs.mon@hp.com"

        webhook:
            timeout: 5

        pagerduty:
            timeout: 5
            url: "https://events.pagerduty.com/generic/2010-04-15/create_event.json"

    processors:
        alarm:
            number: 1
            ttl: 14400  # In seconds, undefined for none. Alarms older than this are not processed
        notification:
            number: 1

    retry:
        interval: 30
        max_attempts: 5

    queues:
        alarms_size: 256
        finished_size: 256
        notifications_size: 256
        sent_notifications_size: 50  # limiting this size reduces potential # of re-sent notifications after a failure

    zookeeper:
        url: {{ .Values.zookeeper.uri | quote }}
        notification_path: "/notification/alarms"
        notification_retry_path: "/notification/retry"
        periodic_path:
            60: /notification/60_seconds

    logging: # Used in logging.dictConfig
        version: 1
        disable_existing_loggers: False
        formatters:
            default:
                format: "%(asctime)s %(levelname)s %(name)s %(message)s"
        handlers:
            console:
                class: logging.StreamHandler
                formatter: default
    #        file:
    #            class: logging.handlers.RotatingFileHandler
    #            filename: "/var/log/monasca/notification/notification.log"
    #            formatter: default
    #            maxBytes: 10485760  # Rotate at file size ~10MB
    #            backupCount: 5  # Keep 5 older logs around
        loggers:
            kazoo:
                level: WARN
            kafka:
                level: WARN
            statsd:
                level: WARN
        root:
            handlers:
                - console
    #            - file
            level: WARN